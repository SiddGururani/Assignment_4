/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"

using namespace std;

//==============================================================================
NewProjectAudioProcessor::NewProjectAudioProcessor()
{
    _vibrato = 0;
    _mod_frequency = new AudioParameterFloat("mod freq","Modulation Frequency", 0.F, 15.F, 10.F);
    addParameter(_mod_frequency);
    _mod_amplitude = new AudioParameterFloat("mod amp","Modulation Amplitude", 0.F, 0.1F, 0.01F);
    addParameter(_mod_amplitude);
}

NewProjectAudioProcessor::~NewProjectAudioProcessor()
{
    CVibrato::destroyInstance(_vibrato);
}

//==============================================================================
const String NewProjectAudioProcessor::getName() const
{
    return JucePlugin_Name;
}

bool NewProjectAudioProcessor::acceptsMidi() const
{
   #if JucePlugin_WantsMidiInput
    return true;
   #else
    return false;
   #endif
}

bool NewProjectAudioProcessor::producesMidi() const
{
   #if JucePlugin_ProducesMidiOutput
    return true;
   #else
    return false;
   #endif
}

double NewProjectAudioProcessor::getTailLengthSeconds() const
{
    return 0.0;
}

int NewProjectAudioProcessor::getNumPrograms()
{
    return 1;   // NB: some hosts don't cope very well if you tell them there are 0 programs,
                // so this should be at least 1, even if you're not really implementing programs.
}

int NewProjectAudioProcessor::getCurrentProgram()
{
    return 0;
}

void NewProjectAudioProcessor::setCurrentProgram (int index)
{
}

const String NewProjectAudioProcessor::getProgramName (int index)
{
    return String();
}

void NewProjectAudioProcessor::changeProgramName (int index, const String& newName)
{
}

//==============================================================================
void NewProjectAudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    // Use this method as the place to do any pre-playback
    // initialisation that you need..
    const int totalNumInputChannels  = getTotalNumInputChannels();
    const int totalNumOutputChannels = getTotalNumOutputChannels();
    int num_channels = max(totalNumOutputChannels, totalNumInputChannels);
    
    _error_check = CVibrato::createInstance(_vibrato);
    if (_error_check == kUnknownError)
    {
        cerr << "Runtime error. Memory issues." << endl;
    }
    
    _error_check = _vibrato->initInstance(0.1 ,sampleRate, num_channels);
    if (_error_check == kFunctionInvalidArgsError)
    {
        cerr << "Invalid parameters: One or more parameters is out of bounds. Please check your parameters." << endl;
    }
    
    //initialize with default parameters
    _vibrato->setParam(CVibrato::VibratoParam_t::kParamModFreqInHz, getParameterDefaultValue(0));
    _vibrato->setParam(CVibrato::VibratoParam_t::kParamModWidthInS, getParameterDefaultValue(1));
}

void NewProjectAudioProcessor::releaseResources()
{
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
}

void NewProjectAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
    float** writePointer = buffer.getArrayOfWritePointers();
    _vibrato->process(writePointer, writePointer, buffer.getNumSamples());
}

void NewProjectAudioProcessor::processBlockBypassed (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
    
}

//==============================================================================
bool NewProjectAudioProcessor::hasEditor() const
{
    return true; // (change this to false if you choose to not supply an editor)
}

AudioProcessorEditor* NewProjectAudioProcessor::createEditor()
{
    return new NewProjectAudioProcessorEditor (*this);
}

//==============================================================================
void NewProjectAudioProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
}

void NewProjectAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
}

void NewProjectAudioProcessor::setParameter(int parameterIndex, float newValue)
{
    if (parameterIndex == 0)
    {
        _vibrato->setParam(CVibrato::VibratoParam_t::kParamModFreqInHz, newValue);
    }
    else if (parameterIndex == 1)
    {
        _vibrato->setParam(CVibrato::VibratoParam_t::kParamModWidthInS, newValue);
    }
}


//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new NewProjectAudioProcessor();
}
